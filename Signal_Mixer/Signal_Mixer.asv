mSignalID = fopen('meditation.txt', 'r');
lSignalID = fopen('lightsource_Large_Amplitude.txt', 'r');

formatSpec = '%f';

mSignal = fscanf(mSignalID, formatSpec);
lSignal = fscanf(lSignalID, formatSpec);

fclose(mSignalID);
fclose(lSignalID);

mixedSignal = (mSignal * (10^(-6/20)) + lSignal * (10^(-6/20)));
%mixedSignal = mSignal + lSignal;
%mixedSignal = round(mixedSignal * 100)/100;

cSignal = czConvolution(mSignal, lSignal);
cSignal = cSignal';

rng default;
Fs = 250;
t = 0:1/Fs:1-1/Fs;


function [psdx;freq]
x = mixedSignal;

N = length(x);
xdft = fft(x);
xdft = xdft(1:N/2+1);
psdx = (1/(Fs*N)) * abs(xdft).^2;
psdx(2:end-1) = 2*psdx(2:end-1);
freq = 0:Fs/length(x):Fs/2;
freqT = freq';

%plot(freq,10*log10(psdx))
%grid on
%title('Periodogram Using FFT')
%xlabel('Frequency (Hz)')
%ylabel('Power/Frequency (dB/Hz)')

% SIMPLE CONVOLUTION FUNCTION conv(x,h) 
% Lucas Emanuel Batista dos Santos 
% - 
% Receive two vectors and show on screen a new vector resultant of 
% convolution operation 
function ccc = czConvolution(x, h)
x = x';
h = h';
m = length(x);
n = length(h);
X = [x, zeros(1, n)];
H = [h, zeros(1, m)];
for i=1:n+m-1
    Y(i) = 0;
    for j=1:m
        if (i-j+1>0)
            Y(i) = Y(i)+X(j)*H(i-j+1);
        else
        end
    end
end
ccc = Y;
end





















